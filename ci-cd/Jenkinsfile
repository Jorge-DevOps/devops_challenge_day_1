pipeline {
    agent any

    environment {
        TF_WORKING_DIR = "infra"
        REPOSIOTRY = 'https://github.com/Jorge-DevOps/devops_challenge_day_1'
        DOCKER_REGISTRY = 'jorgedevops20' 
        DOCKER_IMAGE = "${DOCKER_REGISTRY}/devops_challenge_day_1" 
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    echo "Clonando el repositorio..."
                    checkout scm
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "Construyendo la imagen Docker..."
                    sh 'docker build -t jorgedevops20/devops_challenge_day_1 -f ci-cd/Dockerfile .'
                }
            }
        }

        stage('Push Docker Image') {
             steps {
                 script {
                    sh "docker push ${DOCKER_REGISTRY}/devops_challenge_day_1:latest"
                 }
             }
        }

        // stage('Terraform Init & Plan') {
        //     steps {
        //         script {
        //             echo "Inicializando Terraform..."
        //             sh "cd $TF_WORKING_DIR && terraform init"
        //             echo "Planificando infraestructura..."
        //             sh "cd $TF_WORKING_DIR && terraform plan"
        //         }
        //     }
        // }

        // stage('Terraform Apply') {
        //     steps {
        //         script {
        //             echo "Desplegando infraestructura con Terraform..."
        //             sh "cd $TF_WORKING_DIR && terraform apply -auto-approve"
        //         }
        //     }
        // }

        // stage('Verify Deployment') {
        //     steps {
        //         script {
        //             echo "Verificando despliegue..."
        //             sh "curl -s http://your-app-url/hello || echo 'Error: No se pudo acceder al servicio'"
        //         }
        //     }
        // }
    }

    post {
        success {
            echo "✅ Pipeline completado con éxito."
        }
        failure {
            echo "❌ Error en el pipeline."
        }
    }
}
